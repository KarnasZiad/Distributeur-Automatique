# üß™ Script de Test Complet - VendingPro API
# =====================================================

Write-Host "üõí VendingPro API - Tests Complets" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

$baseUrl = "http://localhost:8080/api/vending"
$testResults = @()

# Fonction pour tester un endpoint
function Test-Endpoint {
    param(
        [string]$Name,
        [string]$Method,
        [string]$Url,
        [hashtable]$Headers = @{},
        [string]$Body = $null
    )
    
    Write-Host "üîç Test: $Name" -ForegroundColor Yellow
    Write-Host "   $Method $Url" -ForegroundColor Gray
    
    try {
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
        }
        
        if ($Body) {
            $params.Body = $Body
            $params.ContentType = "application/json"
        }
        
        $response = Invoke-RestMethod @params
        
        if ($response.success -eq $true) {
            Write-Host "   ‚úÖ SUCC√àS" -ForegroundColor Green
            $script:testResults += @{Name=$Name; Status="SUCC√àS"; Response=$response}
        } else {
            Write-Host "   ‚ö†Ô∏è  √âCHEC: $($response.message)" -ForegroundColor Yellow
            $script:testResults += @{Name=$Name; Status="√âCHEC"; Response=$response}
        }
        
        return $response
    }
    catch {
        Write-Host "   ‚ùå ERREUR: $($_.Exception.Message)" -ForegroundColor Red
        $script:testResults += @{Name=$Name; Status="ERREUR"; Error=$_.Exception.Message}
        return $null
    }
    
    Write-Host ""
}

# Fonction pour afficher une r√©ponse
function Show-Response {
    param($Response, [string]$Title)
    
    if ($Response) {
        Write-Host "üìä $Title:" -ForegroundColor Magenta
        if ($Response.data) {
            $Response.data | ConvertTo-Json -Depth 3 | Write-Host -ForegroundColor White
        } else {
            $Response | ConvertTo-Json -Depth 2 | Write-Host -ForegroundColor White
        }
        Write-Host ""
    }
}

Write-Host "üöÄ D√©marrage des tests..." -ForegroundColor Green
Write-Host ""

# =====================================================
# 1. TESTS DE BASE
# =====================================================

Write-Host "üìã 1. TESTS DE BASE" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan

# Test 1: R√©cup√©rer les produits
$products = Test-Endpoint -Name "R√©cup√©ration des produits" -Method "GET" -Url "$baseUrl/products"
Show-Response $products "Produits disponibles"

# Test 2: V√©rifier les pi√®ces valides
$validCoins = Test-Endpoint -Name "Pi√®ces valides" -Method "GET" -Url "$baseUrl/valid-coins"
Show-Response $validCoins "Pi√®ces accept√©es"

# Test 3: Consulter le solde initial
$balance = Test-Endpoint -Name "Solde initial" -Method "GET" -Url "$baseUrl/balance"
Show-Response $balance "Solde actuel"

# =====================================================
# 2. TESTS D'INSERTION DE PI√àCES
# =====================================================

Write-Host "üí∞ 2. TESTS D'INSERTION DE PI√àCES" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# Test des diff√©rentes pi√®ces
$coins = @(0.5, 1.0, 2.0, 5.0, 10.0)
foreach ($coin in $coins) {
    $result = Test-Endpoint -Name "Insertion pi√®ce $coin MAD" -Method "POST" -Url "$baseUrl/insert-coin?coinValue=$coin"
    if ($result) {
        Write-Host "   üí∞ Solde apr√®s insertion: $($result.data.totalInserted) MAD" -ForegroundColor Green
    }
}

# Test pi√®ce invalide
Test-Endpoint -Name "Pi√®ce invalide (3 MAD)" -Method "POST" -Url "$baseUrl/insert-coin?coinValue=3.0"

# V√©rifier le solde apr√®s insertions
$newBalance = Test-Endpoint -Name "Solde apr√®s insertions" -Method "GET" -Url "$baseUrl/balance"
Show-Response $newBalance "Nouveau solde"

# =====================================================
# 3. TESTS D'ACHAT
# =====================================================

Write-Host "üõí 3. TESTS D'ACHAT" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan

# Essayer d'acheter le premier produit
if ($products -and $products.data -and $products.data.Count -gt 0) {
    $firstProduct = $products.data[0]
    Write-Host "üéØ Tentative d'achat: $($firstProduct.name) - $($firstProduct.price) MAD" -ForegroundColor Yellow
    
    $purchase = Test-Endpoint -Name "Achat produit $($firstProduct.name)" -Method "POST" -Url "$baseUrl/select-product/$($firstProduct.id)"
    Show-Response $purchase "R√©sultat d'achat"
}

# Essayer d'acheter un produit inexistant
Test-Endpoint -Name "Achat produit inexistant (ID 999)" -Method "POST" -Url "$baseUrl/select-product/999"

# =====================================================
# 4. TESTS DE TRANSACTION
# =====================================================

Write-Host "üîÑ 4. TESTS DE TRANSACTION" -ForegroundColor Cyan
Write-Host "=========================" -ForegroundColor Cyan

# Ins√©rer quelques pi√®ces pour les tests
Test-Endpoint -Name "Insertion 5 MAD pour test" -Method "POST" -Url "$baseUrl/insert-coin?coinValue=5.0" | Out-Null
Test-Endpoint -Name "Insertion 2 MAD pour test" -Method "POST" -Url "$baseUrl/insert-coin?coinValue=2.0" | Out-Null

# V√©rifier le statut de transaction
$transactionStatus = Test-Endpoint -Name "Statut de transaction" -Method "GET" -Url "$baseUrl/transaction-status"
Show-Response $transactionStatus "Statut transaction"

# Annuler la transaction
$cancel = Test-Endpoint -Name "Annulation de transaction" -Method "POST" -Url "$baseUrl/cancel"
Show-Response $cancel "R√©sultat annulation"

# V√©rifier le solde apr√®s annulation
Test-Endpoint -Name "Solde apr√®s annulation" -Method "GET" -Url "$baseUrl/balance"

# =====================================================
# 5. TESTS DE MONITORING
# =====================================================

Write-Host "üìä 5. TESTS DE MONITORING" -ForegroundColor Cyan
Write-Host "=========================" -ForegroundColor Cyan

# Test des statistiques
$stats = Test-Endpoint -Name "Statistiques" -Method "GET" -Url "$baseUrl/statistics"
Show-Response $stats "Statistiques compl√®tes"

# Test de sant√©
$health = Test-Endpoint -Name "√âtat de sant√©" -Method "GET" -Url "$baseUrl/health"
Show-Response $health "√âtat de sant√©"

# Test des alertes
$alerts = Test-Endpoint -Name "Alertes syst√®me" -Method "GET" -Url "$baseUrl/alerts"
Show-Response $alerts "Alertes"

# Test de diagnostic
$diagnostic = Test-Endpoint -Name "Diagnostic complet" -Method "POST" -Url "$baseUrl/diagnostic"
Show-Response $diagnostic "Rapport de diagnostic"

# =====================================================
# 6. TESTS DE STRESS
# =====================================================

Write-Host "‚ö° 6. TESTS DE STRESS" -ForegroundColor Cyan
Write-Host "====================" -ForegroundColor Cyan

Write-Host "üî• Test de stress: 10 insertions rapides" -ForegroundColor Yellow
for ($i = 1; $i -le 10; $i++) {
    $coin = $coins[(Get-Random -Maximum $coins.Length)]
    Write-Host "   Insertion $i/10: $coin MAD" -ForegroundColor Gray
    Test-Endpoint -Name "Stress test $i" -Method "POST" -Url "$baseUrl/insert-coin?coinValue=$coin" | Out-Null
}

# Annuler apr√®s le stress test
Test-Endpoint -Name "Nettoyage apr√®s stress test" -Method "POST" -Url "$baseUrl/cancel" | Out-Null

# =====================================================
# 7. R√âSUM√â DES TESTS
# =====================================================

Write-Host "üìà R√âSUM√â DES TESTS" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan

$successCount = ($testResults | Where-Object { $_.Status -eq "SUCC√àS" }).Count
$failureCount = ($testResults | Where-Object { $_.Status -eq "√âCHEC" }).Count
$errorCount = ($testResults | Where-Object { $_.Status -eq "ERREUR" }).Count
$totalTests = $testResults.Count

Write-Host ""
Write-Host "üìä R√©sultats:" -ForegroundColor White
Write-Host "   ‚úÖ Succ√®s: $successCount" -ForegroundColor Green
Write-Host "   ‚ö†Ô∏è  √âchecs: $failureCount" -ForegroundColor Yellow
Write-Host "   ‚ùå Erreurs: $errorCount" -ForegroundColor Red
Write-Host "   üìã Total: $totalTests tests" -ForegroundColor Cyan

$successRate = [math]::Round(($successCount / $totalTests) * 100, 2)
Write-Host "   üéØ Taux de r√©ussite: $successRate%" -ForegroundColor $(if($successRate -gt 80) {"Green"} elseif($successRate -gt 60) {"Yellow"} else {"Red"})

Write-Host ""

if ($errorCount -gt 0) {
    Write-Host "‚ùå ERREURS D√âTECT√âES:" -ForegroundColor Red
    $testResults | Where-Object { $_.Status -eq "ERREUR" } | ForEach-Object {
        Write-Host "   - $($_.Name): $($_.Error)" -ForegroundColor Red
    }
    Write-Host ""
}

if ($failureCount -gt 0) {
    Write-Host "‚ö†Ô∏è  √âCHECS D√âTECT√âS:" -ForegroundColor Yellow
    $testResults | Where-Object { $_.Status -eq "√âCHEC" } | ForEach-Object {
        Write-Host "   - $($_.Name): $($_.Response.message)" -ForegroundColor Yellow
    }
    Write-Host ""
}

Write-Host "üéâ Tests termin√©s!" -ForegroundColor Green
Write-Host ""

# =====================================================
# 8. SC√âNARIO COMPLET D'UTILISATION
# =====================================================

Write-Host "üé¨ SC√âNARIO COMPLET D'UTILISATION" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

Write-Host "üìñ Simulation d'un achat complet..." -ForegroundColor Yellow
Write-Host ""

# √âtape 1: V√©rifier les produits disponibles
Write-Host "1Ô∏è‚É£ Consultation des produits..." -ForegroundColor White
$availableProducts = Test-Endpoint -Name "Produits pour sc√©nario" -Method "GET" -Url "$baseUrl/products"

if ($availableProducts -and $availableProducts.data) {
    $targetProduct = $availableProducts.data[0]
    Write-Host "   üéØ Produit s√©lectionn√©: $($targetProduct.name) - $($targetProduct.price) MAD" -ForegroundColor Green

    # √âtape 2: Ins√©rer les pi√®ces n√©cessaires
    Write-Host "2Ô∏è‚É£ Insertion des pi√®ces..." -ForegroundColor White
    $targetPrice = [double]$targetProduct.price.Replace(',', '.')
    $insertedAmount = 0

    # Ins√©rer des pi√®ces jusqu'√† avoir assez
    while ($insertedAmount -lt $targetPrice) {
        $coinToInsert = if (($targetPrice - $insertedAmount) -ge 5) { 5.0 }
                       elseif (($targetPrice - $insertedAmount) -ge 2) { 2.0 }
                       elseif (($targetPrice - $insertedAmount) -ge 1) { 1.0 }
                       else { 0.5 }

        $insertResult = Test-Endpoint -Name "Insertion $coinToInsert MAD" -Method "POST" -Url "$baseUrl/insert-coin?coinValue=$coinToInsert"
        if ($insertResult -and $insertResult.data) {
            $insertedAmount = [double]$insertResult.data.totalInserted.Replace(',', '.')
            Write-Host "   üí∞ Total ins√©r√©: $insertedAmount MAD" -ForegroundColor Green
        }
    }

    # √âtape 3: Effectuer l'achat
    Write-Host "3Ô∏è‚É£ Achat du produit..." -ForegroundColor White
    $purchaseResult = Test-Endpoint -Name "Achat final" -Method "POST" -Url "$baseUrl/select-product/$($targetProduct.id)"

    if ($purchaseResult -and $purchaseResult.success) {
        Write-Host "   üéâ Achat r√©ussi!" -ForegroundColor Green
        if ($purchaseResult.data.changeAmount -gt 0) {
            Write-Host "   üí∏ Monnaie rendue: $($purchaseResult.data.changeAmount) MAD" -ForegroundColor Yellow
        }
    }

    # √âtape 4: V√©rifier les statistiques finales
    Write-Host "4Ô∏è‚É£ V√©rification des statistiques..." -ForegroundColor White
    $finalStats = Test-Endpoint -Name "Statistiques finales" -Method "GET" -Url "$baseUrl/statistics"
    if ($finalStats -and $finalStats.data) {
        Write-Host "   üìä Transactions totales: $($finalStats.data.totalTransactions)" -ForegroundColor Cyan
        Write-Host "   üí∞ Revenus totaux: $($finalStats.data.totalRevenue) MAD" -ForegroundColor Cyan
    }
}

Write-Host ""
Write-Host "üéâ Tests termin√©s!" -ForegroundColor Green
Write-Host ""
Write-Host "üí° Pour plus de d√©tails, consultez:" -ForegroundColor Cyan
Write-Host "   - API Documentation: http://localhost:8080" -ForegroundColor White
Write-Host "   - Console H2: http://localhost:8080/h2-console" -ForegroundColor White
Write-Host "   - Logs application dans la console Spring Boot" -ForegroundColor White
